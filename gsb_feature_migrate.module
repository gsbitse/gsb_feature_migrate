<?php

/**
 * @file
 * Code for the GSB Feature Migrate feature.
 */
include_once 'gsb_feature_migrate.features.inc';

/**
 * Implements hook_ctools_plugin_directory().
 */
function gsb_feature_migrate_ctools_plugin_directory($module, $plugin) {
  if ($module == 'feeds_tamper') {
    return 'plugins';
  }
}

/**
 * Implements hook_feeds_processor_targets_alter().
 *
 * Add Image:uri target that will not download the file, and will just use existing one.
 */
function gsb_feature_migrate_feeds_processor_targets_alter(&$targets, $entity_type, $bundle_name) {
  foreach (field_info_instances($entity_type, $bundle_name) as $name => $instance) {
    $info = field_info_field($name);

    if (in_array($info['type'], array('image', 'file'))) {
      $targets[$name . ':uri_no_download'] = array(
        'name' => t('@label: URI without download', array('@label' => $instance['label'])),
        'callback' => 'gsb_feature_migrate_image_feeds_set_target',
        'description' => t('The URI of the @label field.', array('@label' => $instance['label'])),
        'real_target' => $name,
      );
    }

    // Target for Affiliations field_collection.
    if ($name == 'field_affilitations') {
      $targets[$name] = array(
        'name' => t('Field Collection: @label', array('@label' => $instance['label'])),
        'callback' => 'gsb_feature_migrate_field_affilitations_feeds_set_target',
        'description' => t('Field Collection object of @label field.', array('@label' => $instance['label'])),
        'real_target' => $name,
      );
    }
    // Target for Authors field_collection.
    if ($name == 'field_person_fac_staff_other') {
      $targets[$name . ':first_name'] = array(
        'name' => t('Field Collection: @label -> First Name', array('@label' => $instance['label'])),
        'callback' => 'gsb_feature_migrate_field_person_fac_staff_other_feeds_set_target',
        'description' => t('Field Collection object of @label field.', array('@label' => $instance['label'])),
        'real_target' => $name,
      );
    }
  }
}

/**
 * Callback for imagefield:uri_no_download target.
 */
function gsb_feature_migrate_image_feeds_set_target($source, $entity, $target, $value) {
  if (empty($value)) {
    return;
  }

  // Make sure $value is an array.
  if (!is_array($value)) {
    $value = array($value);
  }

  $entity_type = $source->importer->processor->entityType();
  $bundle = $source->importer->processor->bundle();

  list($field_name, $sub_field) = explode(':', $target, 2);
  $instance_info = field_info_instance($entity_type, $field_name, $bundle);
  $info = field_info_field($field_name);

  // Populate entity.
  $delta = 0;
  $field = isset($entity->$field_name) ? $entity->$field_name : array();

  foreach ($value as $v) {
    if ($info['cardinality'] == $delta) {
      break;
    }

    $file = file_uri_to_object($v);

    if (isset($file->fid)) {
      // Init file array.
      $field[LANGUAGE_NONE][$delta] = isset($field[LANGUAGE_NONE][$delta]) ? $field[LANGUAGE_NONE][$delta] : array();
      $field[LANGUAGE_NONE][$delta] += (array) $file;
      $field[LANGUAGE_NONE][$delta]['display'] = 1;
      $delta++;
    }
    else {
      watchdog('gsb_migration', t("File :uri doesn't exist. It was skipped.", array(':uri' => $file->uri)));
    }
  }

  $entity->$field_name = $field;
}

/**
 * Callback for field_affiliations target.
 */
function gsb_feature_migrate_field_affilitations_feeds_set_target($source, $entity, $target, $value) {
  if (empty($value)) {
    return;
  }

  // Make sure $value is an array of field_collection item arrays.
  if (is_array($value) && isset($value['item_id'])) {
    $value = array($value);
  }

  foreach ($value as $k => $v) {
    $field_collection_item = entity_create('field_collection_item', array('field_name' => 'field_affilitations'));
    $field_collection_item->setHostEntity('node', $entity);
    $emw = entity_metadata_wrapper('field_collection_item', $field_collection_item);
    $emw->field_affiliations_position->set($v['field_affiliation_type'][LANGUAGE_NONE][0]['value']);
    $emw->field_link_single->set(array(
      'title' => $v['field_organization_name'][LANGUAGE_NONE][0]['value'],
      'url' => $v['field_organization_url'][LANGUAGE_NONE][0]['url']
    ));
    $emw->field_year_range->set(array(
      'value' => date('Y-m-d', strtotime($v['field_year_from'][LANGUAGE_NONE][0]['value'])),
      'value2' => date('Y-m-d', strtotime($v['field_year_to'][LANGUAGE_NONE][0]['value'])),
    ));
  }
}

/**
 * Callback for field_person_fac_staff_other target.
 */
function gsb_feature_migrate_field_person_fac_staff_other_feeds_set_target($source, $entity, $target, $value) {
  if (empty($value)) {
    return;
  }

  // Create field_collection_item if empty.
  if (empty($entity->field_person_fac_staff_other)) {
    $field_collection_item = entity_create('field_collection_item', array('field_name' => 'field_person_fac_staff_other'));
    $field_collection_item->setHostEntity('node', $entity);
  }
  else {
    $field_collection_item = field_collection_item_load($entity->field_person_fac_staff_other[LANGUAGE_NONE][0]['value']);
  }

  $emw = entity_metadata_wrapper('field_collection_item', $field_collection_item);
  $emw->field_person_or_other->set('Other');
  $emw->field_first_name->set($value);
}

/**
 * Implements hook_menu().
 *
 * Add custom taxonomy import script callback.
 */
function gsb_feature_migrate_menu() {
  $items['taxonomy_import'] = array(
    'title' => 'Import taxonomies',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('gsb_feature_migrate_taxonomy_form'),
    'access arguments' => array('administer taxonomy'),
    'file' => 'gsb_feature_migrate_taxonomy.inc',
    'type' => MENU_CALLBACK,
  );

  return $items;
}

/**
 * Create redirects for imported terms.
 */
function gsb_feature_migrate_feeds_after_import(FeedsSource $source) {
  // Process only if redirect module is enabled.
  if (module_exists('redirect')) {
    if ($source->importer->processor->entityType() == 'taxonomy_term') {
      $vocabulary = $source->importer->processor->vocabulary();
      // Parse results again.
      // TODO: Find more elegant way to deal with this.
      $results = $source->importer->parser->parse($source, $source->fetcher_result);

      // Create redirects.
      foreach ($results->items as $parser_result) {
        // Rely on hardcoded targets for now.
        $term_name = $parser_result['jsonpath_parser:0'];
        $tid = $parser_result['jsonpath_parser:4'];
        $alias = $parser_result['jsonpath_parser:5'];

        $term = taxonomy_get_term_by_name($term_name, $vocabulary->machine_name);
        $term = array_shift($term);

        // Create redirects for old term urls.
        $redirect_paths = array();
        $redirect_paths[] = 'taxonomy/term/' . $tid;
        // Create redirects also for aliases.
        if (!in_array($alias, $redirect_paths)) {
          $redirect_paths[] = $alias;
        }

        foreach ($redirect_paths as $v) {
          $redirect = new stdClass();
          redirect_object_prepare($redirect, array(
            'source' => $v,
            'redirect' => drupal_get_path_alias('taxonomy/term/' . $term->tid),
          ));

          $redirects = redirect_load_multiple(array(), array('hash' => redirect_hash($redirect)));
          if ($redirects) {
            $redirect = array_shift($redirects);
            $redirect->redirect = drupal_get_path_alias('taxonomy/term/' . $term->tid);
          }

          redirect_save($redirect);
        }
      }
    }
  }
}

/**
 * Implements hook_form_alter().
 *
 * Set default values for feeds sources if not overriden.
 */
function gsb_feature_migrate_form_alter(&$form, &$form_state) {
  if ($form['#form_id'] == 'feeds_import_form') {
    if (isset($form['feeds']['FeedsHTTPFetcher'])) {
      $fetcher = &$form['feeds']['FeedsHTTPFetcher'];
    }
    elseif (isset($form['feeds']['FeedsCrawler'])) {
      $fetcher = &$form['feeds']['FeedsCrawler'];
    }
    if (isset($fetcher) && empty($fetcher['source']['#default_value'])) {
      $fetcher['source']['#default_value'] = _gsb_feature_migrate_get_fetcher_source($form['#importer_id']);
    }
  }
}

/**
 * Helper function to set default sources for importers.
 *
 * @param string $importer_id
 *
 * @return string Returns tha actual source url
 */
function _gsb_feature_migrate_get_fetcher_source($importer_id) {
  $feeds_sources = array(
    'files' => 'http://sfordsbox.prod.acquia-sites.com/rm/entity_file.json?page=0&pagesize=50',
    'business_insights' => 'http://sfordsbox.prod.acquia-sites.com/rm/entity_node.json?page=0&pagesize=50&param[type]=research',
    'case_studies' => 'http://sfordsbox.prod.acquia-sites.com/rm/entity_node.json?page=0&pagesize=10&param[type]=research_paper',
    'faculty' => 'http://sfordsbox.prod.acquia-sites.com/rm/entity_profile2.json?page=0&pagesize=10&param[type]=faculty',
    'media_mention' => 'http://sfordsbox.prod.acquia-sites.com/rm/entity_node.json?page=0&pagesize=10&param[type]=newsmakers',
    'news_press_releases_to_news' => 'http://gsb:8080/rm/entity_node.json?page=0&pagesize=10&param[type]=news&param[field_migration_category]=PR',
    'news_to_business_insight' => 'http://sfordsbox.prod.acquia-sites.com/rm/entity_node.json?page=0&pagesize=10&param[type]=news&param[field_migration_category]=BI',
    'news_to_school_story' => 'http://sfordsbox.prod.acquia-sites.com/rm/entity_node.json?page=0&pagesize=10&param[type]=news&param[field_migration_category]=SS',
    'publications' => 'http://sfordsbox.prod.acquia-sites.com/rm/entity_node.json?page=0&pagesize=10&param[type]=publication',
    'ranking_to_media_mention' => 'http://sfordsbox.prod.acquia-sites.com/rm/entity_node.json?page=0&pagesize=10&param[type]=ranking',
    'research_papers' => 'http://sfordsbox.prod.acquia-sites.com/rm/entity_node.json?page=0&pagesize=10&param[type]=research_paper',
    'taxonomy_business_insight_topic' => 'http://gsb:8080/rm/taxonomy_term.json?vid=18',
    'taxonomy_company_organization' => 'http://gsb:8080/rm/taxonomy_term.json?vid=19',
    'taxonomy_discipline' => 'http://gsb:8080/rm/taxonomy_term.json?vid=15',
    'taxonomy_industry' => 'http://gsb:8080/rm/taxonomy_term.json?vid=16',
    'taxonomy_region' => 'http://gsb:8080/rm/taxonomy_term.json?vid=17',
    'taxonomy_tag' => 'http://gsb:8080/rm/taxonomy_term.json?vid=61'
  );

  return isset($feeds_sources[$importer_id]) ? $feeds_sources[$importer_id] : '';
}
